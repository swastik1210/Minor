// 8 bit parallel shift register which performs arithmatic shift right and logical shift left using verilog
// module descrption

  
  module dff (q, d, clk, rst);
	input d, clk, rst;
	output q;
    reg q;
  always @( posedge clk)
    begin
      if(rst==1) q<=1'b0;
      else q<=d;
    end
endmodule
module 8SR (out, in, ld, clk, clr, lsl, asr);
  input clk, clr, lsl, asr, ld;
  output [7:0]out;
  input [7:0]in;
  wire [7:0]t;
  assign t[6]=ld?in[6]:asr?out[7]:lsl?out[5]:out[6];
  assign t[5]=ld?in[5]:asr?out[6]:lsl?out[4]:out[5];
  assign t[4]=ld?in[4]:asr?out[5]:lsl?out[3]:out[4];
  assign t[3]=ld?in[3]:asr?out[4]:lsl?out[2]:out[3];
  assign t[2]=ld?in[2]:asr?out[3]:lsl?out[1]:out[2];
  assign t[1]=ld?in[1]:asr?out[2]:lsl?out[0]:out[1];
  assign t[0]=ld?in[0]:asr?out[1]:lsl?1'b0:out[0];
  
  dff D7(out[7], t[7], clk, clr);
  dff D6(out[6], t[6], clk, clr);
  dff D5(out[5], t[5], clk, clr);
  dff D4(out[4], t[4], clk, clr);
  dff D3(out[3], t[3], clk, clr);
  dff D2(out[2], t[2], clk, clr);
  dff D1(out[1], t[1], clk, clr);
  dff D0(out[0], t[0], clk, clr);
endmodule

// testbench

module test_8reg;
  wire [7:0]out;
  reg [7:0]in, prev_out;
  reg load, clock, clear, logicalsl, arithmaticsr;
  
  initial clock = 0;
  always #3 clock= ~clock;
  
  SR8 DUT (out, in, load, clock, clear, logicalsl, arithmaticsr );
  initial
    begin
      $dumpfile("design.vcd");
      $dumpvars(0, test_8reg);
      $monitor($time, " clock = %d, prev_out = %b, in = %b, load=%b clear = %b, logicalsl = %b, arithmaticsr = %b) => out = %b", clock, prev_out, in, load, clear, logicalsl, arithmaticsr, out); 
//test values     

     prev_out=8'bxxxxxxxx; in=8'bxxxxxxxx; load=0; clear=1; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b00000000; in=8'b10000000; load=1; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b10000000; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=1; 
      
      #5 prev_out=8'b10000000; in=8'b00000000; load=0; clear=0; logicalsl=1; arithmaticsr=0; 
      
      #5 prev_out=8'b10000000; in=8'b00000000; load=0; clear=1; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b00000000; in=8'b10000011; load=1; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b10000011; in=8'b00000000; load=0; clear=0; logicalsl=1; arithmaticsr=0;
      
      #5 prev_out=8'b10000011; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=1;
      
      #5 prev_out=8'b10000011; in=8'b00000000; load=0; clear=1; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b00000000; in=8'b11110000; load=1; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b11110000; in=8'b00000000; load=0; clear=0; logicalsl=1; arithmaticsr=0;
      
      #5 prev_out=8'b11110000; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=1;
      
      #5 prev_out=8'b11110000; in=8'b00000000; load=0; clear=1; logicalsl=0; arithmaticsr=0;

      #5 prev_out=8'b00000000; in=8'b00111100; load=1; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b00111100; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=1;
      
      #5 prev_out=8'b00111100; in=8'b00000000; load=0; clear=0; logicalsl=1; arithmaticsr=0;
      
      #5 prev_out=8'b00111100; in=8'b00000000; load=0; clear=1; logicalsl=0; arithmaticsr=0;

      #5 prev_out=8'b00000000; in=8'b01110100; load=1; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b01110100; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=0;
      
      #5 prev_out=8'b01110100; in=8'b00000000; load=0; clear=0; logicalsl=1; arithmaticsr=0;
      
      #5 prev_out=8'b01110100; in=8'b00000000; load=0; clear=0; logicalsl=0; arithmaticsr=1;
      
      #5 $finish;
    end
endmodule
